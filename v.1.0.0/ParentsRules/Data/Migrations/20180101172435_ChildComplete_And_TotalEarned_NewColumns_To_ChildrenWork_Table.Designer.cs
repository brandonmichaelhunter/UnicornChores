// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using ParentsRules.Data;
using System;

namespace ParentsRules.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180101172435_ChildComplete_And_TotalEarned_NewColumns_To_ChildrenWork_Table")]
    partial class ChildComplete_And_TotalEarned_NewColumns_To_ChildrenWork_Table
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ParentsRules.Models.AccountAssociations", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AssociatedUserID");

                    b.Property<bool>("IsChild");

                    b.Property<string>("PrimaryUserID");

                    b.HasKey("ID");

                    b.ToTable("AccountAssociations");
                });

            modelBuilder.Entity("ParentsRules.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AssociatedUserID");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("IsChild");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MiddleName");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("ParentUserID");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AccountUsers");
                });

            modelBuilder.Entity("ParentsRules.Models.ChildrenWork", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ChildCompleted");

                    b.Property<string>("Chore")
                        .IsRequired();

                    b.Property<bool>("ChoreCompleted");

                    b.Property<int>("ChoreID");

                    b.Property<DateTime?>("DateChoreCompleted");

                    b.Property<DateTime?>("DateDue");

                    b.Property<float>("DollarAmount");

                    b.Property<bool>("Friday");

                    b.Property<bool>("Monday");

                    b.Property<string>("ParentID");

                    b.Property<bool>("ParentVerified");

                    b.Property<DateTime?>("ParentVerifiedDate");

                    b.Property<int>("RoomID");

                    b.Property<bool>("Saturday");

                    b.Property<bool>("Sunday");

                    b.Property<bool>("Thursday");

                    b.Property<float>("TotalEarned");

                    b.Property<bool>("Tuesday");

                    b.Property<string>("UserID")
                        .IsRequired();

                    b.Property<bool>("Wednesday");

                    b.HasKey("ID");

                    b.ToTable("ChildrenWork");
                });

            modelBuilder.Entity("ParentsRules.Models.Chroes.ChoreTypes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Chore");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("ID");

                    b.ToTable("ChoreTypes");
                });

            modelBuilder.Entity("ParentsRules.Models.Chroes.UserChores", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Chore")
                        .IsRequired();

                    b.Property<bool>("ChoreCompleted");

                    b.Property<int?>("DashboardViewModelID");

                    b.Property<DateTime?>("DateChoreCompleted");

                    b.Property<DateTime?>("DateDue");

                    b.Property<float>("DollarAmount");

                    b.Property<bool>("Friday");

                    b.Property<bool>("IsDaily");

                    b.Property<bool>("IsWeekly");

                    b.Property<DateTime>("LastPublishDate");

                    b.Property<bool>("Monday");

                    b.Property<string>("ParentID");

                    b.Property<bool>("ParentVerified");

                    b.Property<DateTime?>("ParentVerifiedDate");

                    b.Property<string>("PublishStatus");

                    b.Property<int>("RoomID");

                    b.Property<bool>("Saturday");

                    b.Property<bool>("Sunday");

                    b.Property<bool>("Thursday");

                    b.Property<bool>("Tuesday");

                    b.Property<string>("UserID")
                        .IsRequired();

                    b.Property<bool>("Wednesday");

                    b.HasKey("ID");

                    b.HasIndex("DashboardViewModelID");

                    b.ToTable("UserChores");
                });

            modelBuilder.Entity("ParentsRules.Models.DashboardViewModels.DashboardViewModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AssignedChildID");

                    b.Property<string>("AssignedChildName");

                    b.HasKey("ID");

                    b.ToTable("DashboardViewModel");
                });

            modelBuilder.Entity("ParentsRules.Models.Rooms.RoomTypes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<string>("Room");

                    b.HasKey("ID");

                    b.ToTable("RoomTypes");
                });

            modelBuilder.Entity("ParentsRules.Models.Rooms.UserRooms", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Room");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.ToTable("UserRooms");
                });

            modelBuilder.Entity("ParentsRules.Models.UserConformationRequests", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateConfirmed");

                    b.Property<DateTime>("DateSent");

                    b.Property<string>("Email");

                    b.Property<DateTime>("ExpiredDate");

                    b.Property<string>("FirstName");

                    b.Property<int>("IsConfirmed");

                    b.Property<string>("LastName");

                    b.Property<string>("RegistrationCode");

                    b.Property<string>("RequestedUserID");

                    b.HasKey("ID");

                    b.ToTable("UserConformationRequests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ParentsRules.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ParentsRules.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ParentsRules.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ParentsRules.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ParentsRules.Models.Chroes.UserChores", b =>
                {
                    b.HasOne("ParentsRules.Models.DashboardViewModels.DashboardViewModel")
                        .WithMany("Chores")
                        .HasForeignKey("DashboardViewModelID");
                });
#pragma warning restore 612, 618
        }
    }
}
